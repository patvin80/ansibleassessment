{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Instantiates the EC2 instance with Jenkins based upon Bitnami AMI",
    "Metadata": {

    },
    "Parameters": {
        "KeyValueParameter" : {
            "Type" : "String",
            "Default" : "WitDevEnvironment",
            "Description" : "Enter a value for the Key Pair"
        }
        
    },
    "Mappings": {

    },
    "Conditions": {

    },
    "Resources": {
        "VPC" : {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
              "CidrBlock" : "10.0.0.0/16",
              "EnableDnsSupport" : true,
              "EnableDnsHostnames" : true,
              "Tags" : [
                { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                { "Key": "Name", "Value": "Project_VPC"},
                { "Key" : "Network", "Value" : "Public" }
              ]
            }
        },
        "PublicSubnet" : {
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "CidrBlock" : "10.0.0.0/24",
                "MapPublicIpOnLaunch": "true",
                "Tags" : [
                    {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                    {"Key" : "Network", "Value" : "Public" },
                    { "Key": "Name", "Value": "Project_Public_Subnet"}
                ]
            }
        },
        "InternetGateway" : {
            "Type" : "AWS::EC2::InternetGateway",
            "Properties" : {
              "Tags" : [
                { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                { "Key" : "Network", "Value" : "Public" },
                { "Key": "Name", "Value": "Project_Internetgateway"}
              ]
            }
          },
        "AttachGateway" : {
             "Type" : "AWS::EC2::VPCGatewayAttachment",
             "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
                }
        },
        "RouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                    { "Key" : "Network", "Value" : "Public" },
                    { "Key": "Name", "Value": "Project_RouteTable"}
                ]
            }
        },
        "Route" : {
            "Type" : "AWS::EC2::Route",
            "DependsOn" : "InternetGateway",
            "Properties" : {
               "RouteTableId" : { "Ref" : "RouteTable" },
               "DestinationCidrBlock" : "0.0.0.0/0",
               "GatewayId" : { "Ref" : "InternetGateway" }
            }
        },
        "SubnetRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            }
        },        
        "SecurityGroup01": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable SSH and Web access via port 22 and 8080",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags" : [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                    { "Key" : "Network", "Value" : "Public" },
                    { "Key": "Name", "Value": "Project_SecuirtyGroup"}
                ]
            }
        },
        "JenkinsEc2Instance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "KeyName": { "Ref" : "KeyValueParameter" },
                "ImageId": "ami-97785bed",
                "InstanceType": "t2.micro",
                "Monitoring": "true",
                "NetworkInterfaces" : [
                    { 
                        "DeviceIndex":"0",
                        "AssociatePublicIpAddress" : "true",
                        "DeleteOnTermination" : "true",
                        "SubnetId" : { "Ref" : "PublicSubnet" },
                        "GroupSet": [
                            {
                                "Ref": "SecurityGroup01"
                            }
                        ]
                    }
                ],
                "Tags": [
                    { "Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} },
                    { "Key" : "Network", "Value" : "Public" },
                    { "Key": "Name", "Value": "Project_VVPJenkinsInstance"}
                ],                
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#! /bin/bash\n",
                                "yum -y update\n",
                                "yum install -y docker git\n",
                                "sudo service docker start\n",
                                "cd /home/ec2-user\n",
                                "git clone https://github.com/patvin80/ansibleassessment.git\n",
                                "sudo curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/sbin/docker-compose\n",
                                "sudo chmod +x /usr/local/sbin/docker-compose\n",
                                "cd /home/ec2-user/ansibleassessment/docker-based/Example\n",
                                "sudo usermod -aG docker ec2-user\n",
                                "sudo service docker restart\n",
                                "/usr/local/sbin/docker-compose build\n",
                                "/usr/local/sbin/docker-compose up -d\n",
                                "sleep 2m\n",
                                "api=$(curl -u user:bitnami --silent --show-error http://localhost/jenkins/user/user/configure | grep 'id=\"apiToken\"' | awk -F'\"' '{print $148}')\n",
                                "curl -s -XPOST 'http://localhost/jenkins/createItem?name=GetStartedJob' -u user:$api --data-binary @config.xml -H 'Content-Type:text/xml'\n"

                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "JenkinsUrl": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "JenkinsEc2Instance",
                                "PublicIp"
                            ]
                        },
                        ":8080"
                    ]
                ]
            }
        }
    }
}